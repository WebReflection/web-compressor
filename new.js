var webCompressor=function(e){"use strict";
/*! (c) Andrea Giammarchi @WebReflection */const{ceil:r}=Math,{fromCharCode:t}=String,n=e=>{const r=[],t=e.length-1;for(let n=0;n<t;n++){const t=e.charCodeAt(n);r.push(t>>8,255&t)}return e.charCodeAt(t)&&r.pop(),Uint8Array.from(r)},{defineProperty:o}=Object,{fromCharCode:s}=String,a=e=>e.charCodeAt(0),c=e=>Uint8Array.from(atob(e),a),i={value(){return(e=>{let n=0;const{length:o}=e,s=r(o/2),a=new Uint16Array(s+1);for(let r=0,t=0;t<s;t++){const s=e[r++]<<8;a[t]=s+(r<o?e[r++]:n++)}return a[s]=n,t(...a)})(new Uint8Array(this))}},h={value(){return btoa(s(...new Uint8Array(this)))}},d=(e,r)=>new Response(new Blob([r]).stream().pipeThrough(e)).arrayBuffer();return e.default=class{constructor(e="deflate",r="base64"){const t="utf-16"===r;this.compress=this.compress.bind(this,e,t?i:h),this.decompress=this.decompress.bind(this,e,t?n:c)}async compress(e,r,t){return o(await d(new CompressionStream(e),"string"==typeof t?(new TextEncoder).encode(t):t),"toString",r)}async decompress(e,r,t){return(new TextDecoder).decode(await d(new DecompressionStream(e),"string"==typeof t?r(t):t))}},e}({}).default;
