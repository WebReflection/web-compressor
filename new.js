var webCompressor=function(e){"use strict";
/*! (c) Andrea Giammarchi @WebReflection */const{ceil:r}=Math,{defineProperty:t}=Object,{fromCharCode:n}=String,s=e=>{const r=[],t=e.length-1;for(let n=0;n<t;n++){const t=e.charCodeAt(n);r.push(t>>8,255&t)}return 1===e.charCodeAt(t)&&r.pop(),Uint8Array.from(r)},o=e=>e.charCodeAt(0),a=e=>Uint8Array.from(atob(e),o),c={value(){return(e=>{let t=0;const{length:s}=e,o=r(s/2),a=new Uint16Array(o+1);for(let r=0,n=0;n<o;n++){const o=e[r++]<<8;a[n]=o+(r<s?e[r++]:t++)}return a[o]=t,n(...a)})(new Uint8Array(this))}},i={value(){return btoa(n(...new Uint8Array(this)))}},h=(e,r)=>new Response(new Blob([r]).stream().pipeThrough(e)).arrayBuffer();return e.default=class{constructor(e="deflate",r="base64"){const t="utf-16"===r;this.compress=this.compress.bind(this,e,t?c:i),this.decompress=this.decompress.bind(this,e,t?s:a)}async compress(e,r,n){return t(await h(new CompressionStream(e),"string"==typeof n?(new TextEncoder).encode(n):n),"toString",r)}async decompress(e,r,t){return(new TextDecoder).decode(await h(new DecompressionStream(e),"string"==typeof t?r(t):t))}},e}({}).default;
